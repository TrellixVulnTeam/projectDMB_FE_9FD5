/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Inject, Optional, Pipe } from '@angular/core';
import { TranslocoService } from './transloco.service';
import { switchMap } from 'rxjs/operators';
import { forkJoin } from 'rxjs';
import { TRANSLOCO_SCOPE } from './transloco-scope';
import { TRANSLOCO_LANG } from './transloco-lang';
import { listenOrNotOperator, resolveInlineLoader, shouldListenToLangChanges } from './shared';
import { LangResolver } from './lang-resolver';
import { ScopeResolver } from './scope-resolver';
var TranslocoPipe = /** @class */ (function () {
    function TranslocoPipe(translocoService, providerScope, providerLang, cdr) {
        this.translocoService = translocoService;
        this.providerScope = providerScope;
        this.providerLang = providerLang;
        this.cdr = cdr;
        this.subscription = null;
        this.lastValue = '';
        this.langResolver = new LangResolver();
        this.scopeResolver = new ScopeResolver(this.translocoService);
    }
    // null is for handling strict mode + async pipe types https://github.com/ngneat/transloco/issues/311
    // null is for handling strict mode + optional chaining types https://github.com/ngneat/transloco/issues/488
    // null is for handling strict mode + async pipe types https://github.com/ngneat/transloco/issues/311
    // null is for handling strict mode + optional chaining types https://github.com/ngneat/transloco/issues/488
    /**
     * @param {?} key
     * @param {?=} params
     * @param {?=} inlineLang
     * @return {?}
     */
    TranslocoPipe.prototype.transform = 
    // null is for handling strict mode + async pipe types https://github.com/ngneat/transloco/issues/311
    // null is for handling strict mode + optional chaining types https://github.com/ngneat/transloco/issues/488
    /**
     * @param {?} key
     * @param {?=} params
     * @param {?=} inlineLang
     * @return {?}
     */
    function (key, params, inlineLang) {
        var _this = this;
        if (!key) {
            return key;
        }
        /** @type {?} */
        var keyName = params ? "" + key + JSON.stringify(params) : key;
        if (keyName === this.lastKey) {
            return this.lastValue;
        }
        this.lastKey = keyName;
        this.subscription && this.subscription.unsubscribe();
        /** @type {?} */
        var listenToLangChange = shouldListenToLangChanges(this.translocoService, this.providerLang || inlineLang);
        this.subscription = this.translocoService.langChanges$
            .pipe(switchMap((/**
         * @param {?} activeLang
         * @return {?}
         */
        function (activeLang) {
            /** @type {?} */
            var lang = _this.langResolver.resolve({
                inline: inlineLang,
                provider: _this.providerLang,
                active: activeLang
            });
            return Array.isArray(_this.providerScope)
                ? forkJoin(((/** @type {?} */ (_this.providerScope))).map((/**
                 * @param {?} providerScope
                 * @return {?}
                 */
                function (providerScope) { return _this.resolveScope(lang, providerScope); })))
                : _this.resolveScope(lang, _this.providerScope);
        })), listenOrNotOperator(listenToLangChange))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.updateValue(key, params); }));
        return this.lastValue;
    };
    /**
     * @return {?}
     */
    TranslocoPipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
            // Caretaker note: it's important to clean up references to subscriptions since they save the `next`
            // callback within its `destination` property, preventing classes from being GC'd.
            this.subscription = null;
        }
    };
    /**
     * @private
     * @param {?} key
     * @param {?=} params
     * @return {?}
     */
    TranslocoPipe.prototype.updateValue = /**
     * @private
     * @param {?} key
     * @param {?=} params
     * @return {?}
     */
    function (key, params) {
        /** @type {?} */
        var lang = this.langResolver.resolveLangBasedOnScope(this.path);
        this.lastValue = this.translocoService.translate(key, params, lang);
        this.cdr.markForCheck();
    };
    /**
     * @private
     * @param {?} lang
     * @param {?} providerScope
     * @return {?}
     */
    TranslocoPipe.prototype.resolveScope = /**
     * @private
     * @param {?} lang
     * @param {?} providerScope
     * @return {?}
     */
    function (lang, providerScope) {
        /** @type {?} */
        var resolvedScope = this.scopeResolver.resolve({ inline: undefined, provider: providerScope });
        this.path = this.langResolver.resolveLangPath(lang, resolvedScope);
        /** @type {?} */
        var inlineLoader = resolveInlineLoader(providerScope, resolvedScope);
        return this.translocoService._loadDependencies(this.path, inlineLoader);
    };
    TranslocoPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'transloco',
                    pure: false
                },] }
    ];
    /** @nocollapse */
    TranslocoPipe.ctorParameters = function () { return [
        { type: TranslocoService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLOCO_SCOPE,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLOCO_LANG,] }] },
        { type: ChangeDetectorRef }
    ]; };
    return TranslocoPipe;
}());
export { TranslocoPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TranslocoPipe.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    TranslocoPipe.prototype.lastValue;
    /**
     * @type {?}
     * @private
     */
    TranslocoPipe.prototype.lastKey;
    /**
     * @type {?}
     * @private
     */
    TranslocoPipe.prototype.path;
    /**
     * @type {?}
     * @private
     */
    TranslocoPipe.prototype.langResolver;
    /**
     * @type {?}
     * @private
     */
    TranslocoPipe.prototype.scopeResolver;
    /**
     * @type {?}
     * @private
     */
    TranslocoPipe.prototype.translocoService;
    /**
     * @type {?}
     * @private
     */
    TranslocoPipe.prototype.providerScope;
    /**
     * @type {?}
     * @private
     */
    TranslocoPipe.prototype.providerLang;
    /**
     * @type {?}
     * @private
     */
    TranslocoPipe.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,