{"version":3,"file":"messageformat.transpiler.js","sourceRoot":"","sources":["../../../../../libs/transloco-messageformat/src/lib/messageformat.transpiler.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAC7D,OAAO,EACL,iBAAiB,EACjB,QAAQ,EAER,QAAQ,EACR,QAAQ,EAER,gBAAgB,GAEjB,MAAM,mBAAmB,CAAC;AAG3B,OAAO,EAGL,+BAA+B,GAChC,MAAM,wBAAwB,CAAC;AAChC,OAAO,EACL,aAAa,EACb,cAAc,GAEf,MAAM,yBAAyB,CAAC;;AAGjC,MAAM,OAAO,uBAAwB,SAAQ,iBAAiB;IAK5D,YAGE,MAA2B,EACW,UAA4B;QAElE,KAAK,CAAC,UAAU,CAAC,CAAC;QAClB,MAAM,qBAIA,OAAO,EAAE,IAAI,IAAK,MAAM,CAAE,EAJ1B,EACJ,OAAO,EACP,WAAW,GAAG,IAAI,OAEY,EAD3B,aAAa,cAHZ,0BAIL,CAA+B,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,cAAc,CAAC;QAC9D,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;IAC9D,CAAC;IAED,SAAS,CAAC,KAAU,EAAE,SAAkB,EAAE,EAAE,WAAwB;QAClE,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;QAED,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,MAAM,EAAE;YAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;gBAChC,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC7B,MAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAEtC,MAAM,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;gBAC9D,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBACvD,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;SACJ;aAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAChC,MAAM,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;YAE/D,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACvD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;SACxB;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,aAAa,CAAC,IAAY;QACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IAED,SAAS,CAAC,MAAgB;QACxB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAClE,CAAC;;oHApDU,uBAAuB,kBAOxB,+BAA+B,6BAEnB,gBAAgB;wHAT3B,uBAAuB;2FAAvB,uBAAuB;kBADnC,UAAU;;0BAON,QAAQ;;0BACR,MAAM;2BAAC,+BAA+B;;0BAEtC,QAAQ;;0BAAI,MAAM;2BAAC,gBAAgB","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport {\n  DefaultTranspiler,\n  getValue,\n  HashMap,\n  isObject,\n  setValue,\n  Translation,\n  TRANSLOCO_CONFIG,\n  TranslocoConfig,\n} from '@ngneat/transloco';\nimport MessageFormat, { MessageFormatOptions } from '@messageformat/core';\n\nimport {\n  MessageformatConfig,\n  MFLocale,\n  TRANSLOCO_MESSAGE_FORMAT_CONFIG,\n} from './messageformat.config';\nimport {\n  cachedFactory,\n  defaultFactory,\n  MFFactory,\n} from './messageformat.factory';\n\n@Injectable()\nexport class MessageFormatTranspiler extends DefaultTranspiler {\n  private messageFormat: MessageFormat;\n  private readonly messageConfig: MessageFormatOptions<'string'>;\n  private readonly mfFactory: MFFactory;\n\n  constructor(\n    @Optional()\n    @Inject(TRANSLOCO_MESSAGE_FORMAT_CONFIG)\n    config: MessageformatConfig,\n    @Optional() @Inject(TRANSLOCO_CONFIG) userConfig?: TranslocoConfig\n  ) {\n    super(userConfig);\n    const {\n      locales,\n      enableCache = true,\n      ...messageConfig\n    } = { locales: null, ...config };\n    this.messageConfig = messageConfig;\n    this.mfFactory = enableCache ? cachedFactory : defaultFactory;\n    this.messageFormat = this.mfFactory(locales, messageConfig);\n  }\n\n  transpile(value: any, params: HashMap = {}, translation: Translation): any {\n    if (!value) {\n      return value;\n    }\n\n    if (isObject(value) && params) {\n      Object.keys(params).forEach((p) => {\n        const v = getValue(value, p);\n        const getParams = getValue(params, p);\n\n        const transpiled = super.transpile(v, getParams, translation);\n        const message = this.messageFormat.compile(transpiled);\n        value = setValue(value, p, message(params[p]));\n      });\n    } else if (!Array.isArray(value)) {\n      const transpiled = super.transpile(value, params, translation);\n\n      const message = this.messageFormat.compile(transpiled);\n      return message(params);\n    }\n\n    return value;\n  }\n\n  onLangChanged(lang: string) {\n    this.setLocale(lang);\n  }\n\n  setLocale(locale: MFLocale) {\n    this.messageFormat = this.mfFactory(locale, this.messageConfig);\n  }\n}\n"]}