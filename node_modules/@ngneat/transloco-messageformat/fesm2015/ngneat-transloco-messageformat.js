import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';
import { DefaultTranspiler, isObject, getValue, setValue, TRANSLOCO_CONFIG, TRANSLOCO_TRANSPILER } from '@ngneat/transloco';
import { __rest } from 'tslib';
import MessageFormat from '@messageformat/core';

const TRANSLOCO_MESSAGE_FORMAT_CONFIG = new InjectionToken('TRANSLOCO_MESSAGE_FORMAT_CONFIG');

function defaultFactory(locales, messageConfig) {
    return new MessageFormat(locales, messageConfig);
}
function cachedFactory(locales, messageConfig) {
    const mf = defaultFactory(locales, messageConfig);
    const original = mf.compile;
    const cache = new Map();
    const localeKey = `__${(locales === null || locales === void 0 ? void 0 : locales.toString()) || MessageFormat.defaultLocale}__`;
    mf.compile = function (messages) {
        const cacheKey = `${localeKey}${messages}`;
        const cachedMsg = cache.get(cacheKey);
        if (cachedMsg) {
            return cachedMsg;
        }
        const msg = original.call(this, messages);
        cache.set(cacheKey, msg);
        return msg;
    };
    return mf;
}

class MessageFormatTranspiler extends DefaultTranspiler {
    constructor(config, userConfig) {
        super(userConfig);
        const _a = Object.assign({ locales: null }, config), { locales, enableCache = true } = _a, messageConfig = __rest(_a, ["locales", "enableCache"]);
        this.messageConfig = messageConfig;
        this.mfFactory = enableCache ? cachedFactory : defaultFactory;
        this.messageFormat = this.mfFactory(locales, messageConfig);
    }
    transpile(value, params = {}, translation) {
        if (!value) {
            return value;
        }
        if (isObject(value) && params) {
            Object.keys(params).forEach((p) => {
                const v = getValue(value, p);
                const getParams = getValue(params, p);
                const transpiled = super.transpile(v, getParams, translation);
                const message = this.messageFormat.compile(transpiled);
                value = setValue(value, p, message(params[p]));
            });
        }
        else if (!Array.isArray(value)) {
            const transpiled = super.transpile(value, params, translation);
            const message = this.messageFormat.compile(transpiled);
            return message(params);
        }
        return value;
    }
    onLangChanged(lang) {
        this.setLocale(lang);
    }
    setLocale(locale) {
        this.messageFormat = this.mfFactory(locale, this.messageConfig);
    }
}
MessageFormatTranspiler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageFormatTranspiler, deps: [{ token: TRANSLOCO_MESSAGE_FORMAT_CONFIG, optional: true }, { token: TRANSLOCO_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
MessageFormatTranspiler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageFormatTranspiler });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: MessageFormatTranspiler, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TRANSLOCO_MESSAGE_FORMAT_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TRANSLOCO_CONFIG]
                }] }]; } });

class TranslocoMessageFormatModule {
    static forRoot(config) {
        return {
            ngModule: TranslocoMessageFormatModule,
            providers: [
                { provide: TRANSLOCO_MESSAGE_FORMAT_CONFIG, useValue: config },
                {
                    provide: TRANSLOCO_TRANSPILER,
                    useClass: MessageFormatTranspiler,
                },
            ],
        };
    }
}
TranslocoMessageFormatModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: TranslocoMessageFormatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TranslocoMessageFormatModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: TranslocoMessageFormatModule });
TranslocoMessageFormatModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: TranslocoMessageFormatModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: TranslocoMessageFormatModule, decorators: [{
            type: NgModule
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { MessageFormatTranspiler, TRANSLOCO_MESSAGE_FORMAT_CONFIG, TranslocoMessageFormatModule };
//# sourceMappingURL=ngneat-transloco-messageformat.js.map
