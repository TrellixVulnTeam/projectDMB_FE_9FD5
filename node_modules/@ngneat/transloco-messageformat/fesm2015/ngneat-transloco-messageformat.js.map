{"version":3,"file":"ngneat-transloco-messageformat.js","sources":["../../../../libs/transloco-messageformat/src/lib/messageformat.config.ts","../../../../libs/transloco-messageformat/src/lib/messageformat.factory.ts","../../../../libs/transloco-messageformat/src/lib/messageformat.transpiler.ts","../../../../libs/transloco-messageformat/src/lib/messageformat.module.ts","../../../../libs/transloco-messageformat/src/ngneat-transloco-messageformat.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport MessageFormat, { MessageFormatOptions } from '@messageformat/core';\n\nexport const TRANSLOCO_MESSAGE_FORMAT_CONFIG =\n  new InjectionToken<MessageformatConfig>('TRANSLOCO_MESSAGE_FORMAT_CONFIG');\n\nexport type MFLocale = ConstructorParameters<typeof MessageFormat>[0];\n\nexport interface MessageformatConfig extends MessageFormatOptions<'string'> {\n  locales?: MFLocale;\n  enableCache?: boolean;\n}\n","import { MFLocale } from './messageformat.config';\nimport MessageFormat, {\n  MessageFormatOptions,\n  MessageFunction,\n} from '@messageformat/core';\n\nexport type MFFactory = (\n  locales: MFLocale,\n  messageConfig: MessageFormatOptions<'string'>\n) => MessageFormat;\n\nexport function defaultFactory(\n  locales: MFLocale,\n  messageConfig: MessageFormatOptions<'string'>\n): MessageFormat {\n  return new MessageFormat<'string'>(locales, messageConfig);\n}\n\nexport function cachedFactory(\n  locales: MFLocale,\n  messageConfig: MessageFormatOptions<'string'>\n): MessageFormat {\n  const mf = defaultFactory(locales, messageConfig);\n  const original = mf.compile;\n  const cache = new Map<string, MessageFunction<'string'>>();\n  const localeKey = `__${locales?.toString() || MessageFormat.defaultLocale}__`;\n\n  mf.compile = function (messages: string): MessageFunction<'string'> {\n    const cacheKey = `${localeKey}${messages}`;\n    const cachedMsg = cache.get(cacheKey);\n\n    if (cachedMsg) {\n      return cachedMsg;\n    }\n\n    const msg = original.call(this, messages);\n    cache.set(cacheKey, msg);\n\n    return msg;\n  };\n\n  return mf;\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport {\n  DefaultTranspiler,\n  getValue,\n  HashMap,\n  isObject,\n  setValue,\n  Translation,\n  TRANSLOCO_CONFIG,\n  TranslocoConfig,\n} from '@ngneat/transloco';\nimport MessageFormat, { MessageFormatOptions } from '@messageformat/core';\n\nimport {\n  MessageformatConfig,\n  MFLocale,\n  TRANSLOCO_MESSAGE_FORMAT_CONFIG,\n} from './messageformat.config';\nimport {\n  cachedFactory,\n  defaultFactory,\n  MFFactory,\n} from './messageformat.factory';\n\n@Injectable()\nexport class MessageFormatTranspiler extends DefaultTranspiler {\n  private messageFormat: MessageFormat;\n  private readonly messageConfig: MessageFormatOptions<'string'>;\n  private readonly mfFactory: MFFactory;\n\n  constructor(\n    @Optional()\n    @Inject(TRANSLOCO_MESSAGE_FORMAT_CONFIG)\n    config: MessageformatConfig,\n    @Optional() @Inject(TRANSLOCO_CONFIG) userConfig?: TranslocoConfig\n  ) {\n    super(userConfig);\n    const {\n      locales,\n      enableCache = true,\n      ...messageConfig\n    } = { locales: null, ...config };\n    this.messageConfig = messageConfig;\n    this.mfFactory = enableCache ? cachedFactory : defaultFactory;\n    this.messageFormat = this.mfFactory(locales, messageConfig);\n  }\n\n  transpile(value: any, params: HashMap = {}, translation: Translation): any {\n    if (!value) {\n      return value;\n    }\n\n    if (isObject(value) && params) {\n      Object.keys(params).forEach((p) => {\n        const v = getValue(value, p);\n        const getParams = getValue(params, p);\n\n        const transpiled = super.transpile(v, getParams, translation);\n        const message = this.messageFormat.compile(transpiled);\n        value = setValue(value, p, message(params[p]));\n      });\n    } else if (!Array.isArray(value)) {\n      const transpiled = super.transpile(value, params, translation);\n\n      const message = this.messageFormat.compile(transpiled);\n      return message(params);\n    }\n\n    return value;\n  }\n\n  onLangChanged(lang: string) {\n    this.setLocale(lang);\n  }\n\n  setLocale(locale: MFLocale) {\n    this.messageFormat = this.mfFactory(locale, this.messageConfig);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { TRANSLOCO_TRANSPILER } from '@ngneat/transloco';\nimport { MessageFormatTranspiler } from './messageformat.transpiler';\nimport {\n  TRANSLOCO_MESSAGE_FORMAT_CONFIG,\n  MessageformatConfig,\n} from './messageformat.config';\n\n@NgModule()\nexport class TranslocoMessageFormatModule {\n  static forRoot(\n    config?: MessageformatConfig\n  ): ModuleWithProviders<TranslocoMessageFormatModule> {\n    return {\n      ngModule: TranslocoMessageFormatModule,\n      providers: [\n        { provide: TRANSLOCO_MESSAGE_FORMAT_CONFIG, useValue: config },\n        {\n          provide: TRANSLOCO_TRANSPILER,\n          useClass: MessageFormatTranspiler,\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;MAGa,+BAA+B,GAC1C,IAAI,cAAc,CAAsB,iCAAiC;;SCO3D,cAAc,CAC5B,OAAiB,EACjB,aAA6C;IAE7C,OAAO,IAAI,aAAa,CAAW,OAAO,EAAE,aAAa,CAAC,CAAC;AAC7D,CAAC;SAEe,aAAa,CAC3B,OAAiB,EACjB,aAA6C;IAE7C,MAAM,EAAE,GAAG,cAAc,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;IAClD,MAAM,QAAQ,GAAG,EAAE,CAAC,OAAO,CAAC;IAC5B,MAAM,KAAK,GAAG,IAAI,GAAG,EAAqC,CAAC;IAC3D,MAAM,SAAS,GAAG,KAAK,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAE,KAAI,aAAa,CAAC,aAAa,IAAI,CAAC;IAE9E,EAAE,CAAC,OAAO,GAAG,UAAU,QAAgB;QACrC,MAAM,QAAQ,GAAG,GAAG,SAAS,GAAG,QAAQ,EAAE,CAAC;QAC3C,MAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAEtC,IAAI,SAAS,EAAE;YACb,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC1C,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAEzB,OAAO,GAAG,CAAC;KACZ,CAAC;IAEF,OAAO,EAAE,CAAC;AACZ;;MCjBa,uBAAwB,SAAQ,iBAAiB;IAK5D,YAGE,MAA2B,EACW,UAA4B;QAElE,KAAK,CAAC,UAAU,CAAC,CAAC;QAClB,MAAM,qBAIA,OAAO,EAAE,IAAI,IAAK,MAAM,CAAE,EAJ1B,EACJ,OAAO,EACP,WAAW,GAAG,IAAI,OAEY,EAD3B,aAAa,cAHZ,0BAIL,CAA+B,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,SAAS,GAAG,WAAW,GAAG,aAAa,GAAG,cAAc,CAAC;QAC9D,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;KAC7D;IAED,SAAS,CAAC,KAAU,EAAE,SAAkB,EAAE,EAAE,WAAwB;QAClE,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;QAED,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,MAAM,EAAE;YAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC7B,MAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAEtC,MAAM,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;gBAC9D,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBACvD,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAChD,CAAC,CAAC;SACJ;aAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAChC,MAAM,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;YAE/D,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACvD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;SACxB;QAED,OAAO,KAAK,CAAC;KACd;IAED,aAAa,CAAC,IAAY;QACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KACtB;IAED,SAAS,CAAC,MAAgB;QACxB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;KACjE;;oHApDU,uBAAuB,kBAOxB,+BAA+B,6BAEnB,gBAAgB;wHAT3B,uBAAuB;2FAAvB,uBAAuB;kBADnC,UAAU;;0BAON,QAAQ;;0BACR,MAAM;2BAAC,+BAA+B;;0BAEtC,QAAQ;;0BAAI,MAAM;2BAAC,gBAAgB;;;MCzB3B,4BAA4B;IACvC,OAAO,OAAO,CACZ,MAA4B;QAE5B,OAAO;YACL,QAAQ,EAAE,4BAA4B;YACtC,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,+BAA+B,EAAE,QAAQ,EAAE,MAAM,EAAE;gBAC9D;oBACE,OAAO,EAAE,oBAAoB;oBAC7B,QAAQ,EAAE,uBAAuB;iBAClC;aACF;SACF,CAAC;KACH;;yHAdU,4BAA4B;0HAA5B,4BAA4B;0HAA5B,4BAA4B;2FAA5B,4BAA4B;kBADxC,QAAQ;;;ACRT;;;;;;"}